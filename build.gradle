plugins {
    id 'fabric-loom' version '0.7-SNAPSHOT'
    id 'maven-publish'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.modrinth.minotaur' version '1.1.0'
	id 'org.cadixdev.licenser' version '0.5.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version + "+mc" + project.minecraft_version
group = project.maven_group

minecraft {
    refmapName = "${project.mod_id}-refmap.json"
}

repositories {
	mavenLocal()
	jcenter()
	maven {
		name "Fabric"
		url "https://maven.fabricmc.net/"
	}
	maven {
		name "Siphalor's Maven"
		url "https://maven.siphalor.de/"
	}
	maven {
		url "https://www.cursemaven.com"
	}
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.minecraft_version}+build.${project.yarn_build}"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	def fabric_deps = [
	        'fabric-api-base': '0.1.2+de26dc4942',
            'fabric-events-interaction-v0': '0.4.1+4ea4772942',
			'fabric-events-lifecycle-v0': '0.2.1+4ea4772942',
			'fabric-item-api-v1': '1.1.1+4ea4772942',
			'fabric-lifecycle-events-v1': '1.2.1+4ea4772942',
			'fabric-key-binding-api-v1': '1.0.2+4ea4772942',
            'fabric-networking-v0': '0.2.1+4ea4772942',
			'fabric-networking-api-v1': '1.0.1+4ea4772942',
			'fabric-tag-extensions-v0': '0.1.4+4ea4772942',
			'fabric-mining-levels-v0': '0.1.3+4ea4772942',
			'fabric-resource-loader-v0': '0.1.5+4ea4772942'
	]

	for (entry in fabric_deps.entrySet()) {
		modImplementation "net.fabricmc.fabric-api:" + entry.getKey() + ":" + entry.getValue()
		include "net.fabricmc.fabric-api:" + entry.getKey() + ":" + entry.getValue()
	}

	modImplementation "net.fabricmc.fabric-api:fabric-item-groups-v0:0.2.1+4ea4772942"

	modImplementation("de.siphalor:tweed-1.14:${project.tweed_version}") {
		exclude group: "net.fabricmc.fabric-api"
	}
	include "de.siphalor:tweed-1.14:${project.tweed_version}"

	modImplementation("de.siphalor:amecsapi-1.14:${project.amecs_version}") {
		exclude group: "net.fabricmc.fabric-api"
		exclude module: "nmuk-1.14"
	}
	include "de.siphalor:amecsapi-1.14:${project.amecs_version}"

	modImplementation("curse.maven:cloth-config-319057:${project.clothconfig_version}") {
		exclude group: "net.fabricmc.fabric-api"
		exclude module: "modmenu"
	}
	include "curse.maven:cloth-config-319057:${project.clothconfig_version}"

	modImplementation "me.shedaniel.cloth:basic-math:0.5.1"

	// Smooth startup
	//modRuntime "io.github.ultimateboomer:smoothboot-fabric:1.14.4-1+"
}

//sourceSets.main.java.exclude("**/ModMenu*")

license {
	header = project.file('LICENSE_HEADER')

	include '**/*.java'
}

processResources {
    inputs.property "version", version

	afterEvaluate {
		from(sourceSets.main.resources.srcDirs) {
			include "fabric.mod.json"
			expand "version": version
			duplicatesStrategy DuplicatesStrategy.INCLUDE
		}
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "${project.archives_base_name}-${project.minecraft_major_version}"
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        if (project.hasProperty("siphalorMavenUser")) {
            maven {
                name = "Siphalor"
                url = "https://maven.siphalor.de/upload.php"
                credentials {
                    username = siphalorMavenUser
                    password = siphalorMavenPassword
                }
            }
        }
    }
}

// Mod sites

String getProjectChangelog() {
	def commits = 'git log -20 --format=oneline'.execute().text.readLines()
	def versionCommit = null
	for (commit in commits) {
		if (commit.contains('Version')) {
			versionCommit = commit.split(' ')[0]
			break
		}
	}
	if (versionCommit == null) {
		return """## Version ${project.mod_version}

No changelog found!"""
	}
	return "git log -1 --format=format:##%x20%s%n%n%b%nRelease%x20by%x20%an $versionCommit".execute().text.trim()
}

task uploadToModSites {
	dependsOn build
	group = "upload"
}

if (project.hasProperty("siphalorCurseForgeApi")) {
	curseforge {
		apiKey project.siphalorCurseForgeApi
		project {
			id = "317514"
			releaseType = project.mod_release
			changelogType = "markdown"
			changelog = getProjectChangelog()
			for (version in ((String) project.mod_mc_versions).split(";")) {
				addGameVersion(version)
			}
			relations {
				embeddedLibrary "fabric-api"
				embeddedLibrary "amecs"
				embeddedLibrary "cloth-config"
				embeddedLibrary "tweed-api"
				optionalDependency "modmenu"
			}
			mainArtifact(remapJar) {
				displayName = "[${project.mod_mc_version_specifier}] ${project.mod_version}"
			}
		}
	}
	uploadToModSites.finalizedBy(tasks.curseforge)
}

import com.modrinth.minotaur.TaskModrinthUpload
if (project.hasProperty("siphalorModrinthApi")) {
	task modrinth (type: TaskModrinthUpload) {
		group = "upload"
		dependsOn(build)

		token = project.siphalorModrinthApi
		projectId = "u5Ic2U1u"
		versionNumber = version
		versionName = "[${project.mod_mc_version_specifier}] ${project.mod_version}"
		changelog = getProjectChangelog()
		uploadFile = remapJar
		releaseType = project.mod_release
		for (version in ((String) project.mod_mc_versions).split(";")) {
			addGameVersion(version)
		}
		addLoader("fabric")
	}
	uploadToModSites.finalizedBy(tasks.modrinth)
}
